'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _spotlightJsonLogger=require('spotlight-json-logger');var _spotlightJsonLogger2=_interopRequireDefault(_spotlightJsonLogger);var _lsMonitorClient=require('ls-monitor-client');var _lsMonitorClient2=_interopRequireDefault(_lsMonitorClient);var _raven=require('raven');var _raven2=_interopRequireDefault(_raven);var _sendDataToWorker=require('./processes/sendDataToWorker');var _sendDataToWorker2=_interopRequireDefault(_sendDataToWorker);var _singleFile=require('./handlers/singleFile');var _singleFile2=_interopRequireDefault(_singleFile);var _emitToNextPlugin=require('./emitToNextPlugin');var _emitToNextPlugin2=_interopRequireDefault(_emitToNextPlugin);var _findIndexOfPlugin=require('./findIndexOfPlugin');var _findIndexOfPlugin2=_interopRequireDefault(_findIndexOfPlugin);var _parseMessage=require('./parseMessage');var _parseMessage2=_interopRequireDefault(_parseMessage);var _getMinioURL=require('./minio/getMinioURL');var _getMinioURL2=_interopRequireDefault(_getMinioURL);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const lsMonitorClient=new _lsMonitorClient2.default({baseUri:process.env.MONITOR_URL});exports.default=async function safelyHandleMessages(cChannel,pChannel,pluginName,messages){const messageState={};await Promise.all(messages.map(async msg=>{let message=null;try{message=(0,_parseMessage2.default)(msg);}catch(e){_spotlightJsonLogger2.default.error('Unable to parse message!');console.error(e);_raven2.default.captureException(e);return cChannel.reject(msg,false);}const{nmo}=message;if(!nmo){_spotlightJsonLogger2.default.error('RabbitMQ received a message with no NMO');_raven2.default.captureMessage('RabbitMQ received a message with no NMO');return cChannel.reject(msg,false);}const taskID=nmo.task.task_id;let url=null;try{url=await(0,_getMinioURL2.default)(nmo);}catch(e){if(e.code!=='NotFound'){_spotlightJsonLogger2.default.error(`Error with Minio for ${taskID}... nacking`);console.error(e);return cChannel.nack(msg);}}messageState[taskID]={nmo,jsonld:message.jsonld,url,error:null,action:'',_msg:msg};return true;},{}));let processedMessageState=null;let endMessages=false;let processingError=false;try{processedMessageState=await(0,_sendDataToWorker2.default)(1337,[Object.values(messageState).map(message=>({nmo:message.nmo,jsonld:message.jsonld,url:message.url,error:message.error,action:message.action}))]);}catch(e){if(e.code!==3767){_spotlightJsonLogger2.default.error(`Error with handler for ${pluginName}`);console.error(e);processingError=e.message;processedMessageState=Object.values(messageState);}else{endMessages=true;}}return Promise.all(processedMessageState.map(async processedMessage=>{const{nmo,jsonld,error,action}=processedMessage;const message=messageState[nmo.task.task_id];if(processingError){message.error=processingError;message.action='ack';}else if(endMessages){message.action='reject';}else{message.action=action;message.error=error;}const jobID=nmo.job.job_id;const taskID=nmo.task.task_id;const workflow=nmo.job.workflow;const currentPluginIndex=(0,_findIndexOfPlugin2.default)(workflow,pluginName);if(workflow[currentPluginIndex].env){Object.keys(workflow[currentPluginIndex].env).forEach(k=>{process.env[k]=workflow[currentPluginIndex].env[k];});}nmo.job.workflow[currentPluginIndex].completed=true;const nextBody={nmo,jsonld};const monitorPayload={p:pluginName,t:Math.round(new Date().getTime())};if(message.error){nextBody.jsonld=message.jsonld;monitorPayload.e=message.error;}try{await lsMonitorClient.setTaskStatus(jobID,taskID,monitorPayload);}catch(e){_spotlightJsonLogger2.default.error(`Error sending status to Lightstream Monitor for ${taskID}`);console.error(e);_raven2.default.captureException(e);}switch(message.action){case'reject':{await cChannel.reject(message._msg,false);break;}case'ack':{try{const nextPluginIndex=currentPluginIndex+1;if(!workflow[nextPluginIndex])return cChannel.ack(message._msg);const nextPlugin=workflow[nextPluginIndex].config.name;await(0,_emitToNextPlugin2.default)(pChannel,nextPlugin,nextBody);await cChannel.ack(message._msg);break;}catch(e){_spotlightJsonLogger2.default.error('Error sending to next plugin.');_raven2.default.captureException(e);if(process.env.DEBUG)console.error(e);}// falls through
}default:{await cChannel.nack(message._msg);}}return true;}));};