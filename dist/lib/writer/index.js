'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _fsExtra=require('fs-extra');var _fsExtra2=_interopRequireDefault(_fsExtra);var _raven=require('raven');var _raven2=_interopRequireDefault(_raven);var _minioManager=require('../vendor/minio-manager');var _minioManager2=_interopRequireDefault(_minioManager);var _elasticsearch=require('../../config/elasticsearch');var _elasticsearch2=_interopRequireDefault(_elasticsearch);var _getCurrentDateStamp=require('../helpers/utils/getCurrentDateStamp');var _getCurrentDateStamp2=_interopRequireDefault(_getCurrentDateStamp);var _checkEnvExistence=require('../helpers/utils/checkEnvExistence');var _checkEnvExistence2=_interopRequireDefault(_checkEnvExistence);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}class Writer{constructor(metadata){['MINIO_SCHEME','MINIO_HOST','MINIO_PORT','MINIO_ACCESS','MINIO_SECRET','MINIO_BUCKET'].map(_checkEnvExistence2.default);this.metadata=metadata;this.pluginName=process.env.PLUGIN_ID;const taskId=this.metadata.task._id;this.taskWriteStream=_fsExtra2.default.createWriteStream(`${__dirname}/../../task-${taskId}`,{flags:'a'});this.writeGroupOutput=this.writeGroupOutput.bind(this);this.appendTaskOutput=this.appendTaskOutput.bind(this);}writeGroupOutput(groupOutput){return new Promise((resolve,reject)=>{const taskId=this.metadata.task._id;let data=JSON.stringify({update:{_id:taskId,_type:_elasticsearch2.default.ES_GROUP_TYPE_GROUP,_index:_elasticsearch2.default.ES_GROUP_INDEX}});data+='\n';data+=JSON.stringify({doc:{meta:{userId:this.metadata.user._id,projectId:this.metadata.project._id,jobId:this.metadata.job._id,taskId:this.metadata.task._id,storedAt:(0,_getCurrentDateStamp2.default)()},jsonLD:{'@type':'NaturalLanguageProcessing',naturalLanguageProcessing:groupOutput}},doc_as_upsert:true});data+='\n';_fsExtra2.default.writeFile(`${__dirname}/../../group-${taskId}`,data,err=>{if(err){_raven2.default.captureException(err);return reject(err);}return resolve();});});}appendTaskOutput(taskOutput){const taskId=this.metadata.task._id;let data=JSON.stringify({update:{_id:`${taskOutput['@id']}:${taskId}`,_type:_elasticsearch2.default.ES_GROUP_TYPE_TASK,_index:_elasticsearch2.default.ES_GROUP_INDEX,_parent:taskId}});data+='\n';data+=JSON.stringify({doc:taskOutput,doc_as_upsert:true});data+='\n';this.taskWriteStream.write(data);}// Returns the misc object to update
// {
//   "storePayloads": ["t-1/group/previous-plugin.bin","t-1/group/current-plugin.bin"] 
// }
async store(){const bucket=process.env.MINIO_BUCKET;const jobId=this.metadata.job._id;const taskId=this.metadata.task._id;let storePayloads=[];if(this.metadata.task.metadata){if(this.metadata.task.metadata.storePayloads){storePayloads=this.metadata.task.metadata.storePayloads;}}this.taskWriteStream.end();const storePromise=new Promise((resolve,reject)=>{const groupWriteStream=_fsExtra2.default.createWriteStream(`${__dirname}/../../group-${taskId}`,{flags:'a'});const taskReadStream=_fsExtra2.default.createReadStream(`${__dirname}/../../task-${taskId}`);groupWriteStream.on('close',()=>{_minioManager2.default.uploadFileUsingMinio(bucket,`${jobId}/${taskId}/group/${this.pluginName}.bin`,`${__dirname}/../../group-${taskId}`).then(()=>resolve(`${jobId}/${taskId}/group/${this.pluginName}.bin`)).catch(reject);});groupWriteStream.on('error',reject);taskReadStream.pipe(groupWriteStream);});try{const payloadLocation=await storePromise;storePayloads.push(payloadLocation);await _fsExtra2.default.remove(`${__dirname}/../../group-${taskId}`);await _fsExtra2.default.remove(`${__dirname}/../../task-${taskId}`);return{storePayloads};}catch(e){throw e;}}}exports.default=Writer;